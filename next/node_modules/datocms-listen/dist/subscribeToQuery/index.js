"use strict";
var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (Object.prototype.hasOwnProperty.call(b, p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        if (typeof b !== "function" && b !== null)
            throw new TypeError("Class extends value " + String(b) + " is not a constructor or null");
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
var __assign = (this && this.__assign) || function () {
    __assign = Object.assign || function(t) {
        for (var s, i = 1, n = arguments.length; i < n; i++) {
            s = arguments[i];
            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p))
                t[p] = s[p];
        }
        return t;
    };
    return __assign.apply(this, arguments);
};
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
exports.__esModule = true;
exports.subscribeToQuery = exports.InvalidResponseError = exports.Response400Error = exports.Response500Error = void 0;
var graphql_web_1 = require("@0no-co/graphql.web");
var MessageEventMock = /** @class */ (function () {
    function MessageEventMock(type, options) {
        this.type = type;
        this.data = options === null || options === void 0 ? void 0 : options.data;
    }
    return MessageEventMock;
}());
var MessageEventClass = typeof MessageEvent !== "undefined"
    ? MessageEvent
    : MessageEventMock;
var Response500Error = /** @class */ (function (_super) {
    __extends(Response500Error, _super);
    function Response500Error(message, response) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, Response500Error.prototype);
        _this.response = response;
        return _this;
    }
    return Response500Error;
}(Error));
exports.Response500Error = Response500Error;
var Response400Error = /** @class */ (function (_super) {
    __extends(Response400Error, _super);
    function Response400Error(message, response) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, Response400Error.prototype);
        _this.response = response;
        return _this;
    }
    return Response400Error;
}(Error));
exports.Response400Error = Response400Error;
var InvalidResponseError = /** @class */ (function (_super) {
    __extends(InvalidResponseError, _super);
    function InvalidResponseError(message, response) {
        var _this = _super.call(this, message) || this;
        Object.setPrototypeOf(_this, InvalidResponseError.prototype);
        _this.response = response;
        return _this;
    }
    return InvalidResponseError;
}(Error));
exports.InvalidResponseError = InvalidResponseError;
function subscribeToQuery(options) {
    return __awaiter(this, void 0, void 0, function () {
        var query, token, variables, preview, includeDrafts, excludeInvalid, environment, customFetcher, customEventSourceClass, onStatusChange, onUpdate, onChannelError, onError, onEvent, customReconnectionPeriod, customBaseUrl, fetcher, EventSourceClass, reconnectionPeriod, baseUrl, waitAndReconnect, channelUrl, realQuery, req, registration, e_1, event_1;
        var _this = this;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    query = options.query, token = options.token, variables = options.variables, preview = options.preview, includeDrafts = options.includeDrafts, excludeInvalid = options.excludeInvalid, environment = options.environment, customFetcher = options.fetcher, customEventSourceClass = options.eventSourceClass, onStatusChange = options.onStatusChange, onUpdate = options.onUpdate, onChannelError = options.onChannelError, onError = options.onError, onEvent = options.onEvent, customReconnectionPeriod = options.reconnectionPeriod, customBaseUrl = options.baseUrl;
                    fetcher = customFetcher || window.fetch;
                    EventSourceClass = customEventSourceClass || window.EventSource;
                    reconnectionPeriod = Math.min(customReconnectionPeriod || 1000, 20000);
                    baseUrl = customBaseUrl || "https://graphql-listen.datocms.com";
                    waitAndReconnect = function () { return __awaiter(_this, void 0, void 0, function () {
                        return __generator(this, function (_a) {
                            switch (_a.label) {
                                case 0: return [4 /*yield*/, new Promise(function (resolve) { return setTimeout(resolve, reconnectionPeriod); })];
                                case 1:
                                    _a.sent();
                                    return [2 /*return*/, subscribeToQuery(__assign(__assign({}, options), { reconnectionPeriod: reconnectionPeriod * 2.0 * (1.0 + (Math.random() * 0.2 - 0.1)) }))];
                            }
                        });
                    }); };
                    if (onStatusChange) {
                        onStatusChange("connecting");
                    }
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 4, , 5]);
                    realQuery = typeof query === "string" ? query : (0, graphql_web_1.print)(query);
                    return [4 /*yield*/, fetcher(baseUrl, {
                            headers: __assign(__assign(__assign({ Authorization: "Bearer ".concat(token), Accept: "application/json" }, (environment ? { "X-Environment": environment } : {})), (includeDrafts || preview ? { "X-Include-Drafts": "true" } : {})), (excludeInvalid ? { "X-Exclude-Invalid": "true" } : {})),
                            method: "POST",
                            body: JSON.stringify({ query: realQuery, variables: variables })
                        })];
                case 2:
                    req = _a.sent();
                    if (req.status >= 300 && req.status < 500) {
                        throw new Response400Error("Invalid status code: ".concat(req.status, " ").concat(req.statusText), req);
                    }
                    if (req.status >= 500) {
                        throw new Response500Error("Invalid status code: ".concat(req.status, " ").concat(req.statusText), req);
                    }
                    if (req.headers.get("Content-Type") !== "application/json") {
                        throw new InvalidResponseError("Invalid content type: ".concat(req.headers.get("Content-Type")), req);
                    }
                    return [4 /*yield*/, req.json()];
                case 3:
                    registration = _a.sent();
                    channelUrl = registration.url;
                    if (onEvent) {
                        onEvent({
                            status: "connecting",
                            channelUrl: channelUrl,
                            message: "Received channel URL",
                            response: req
                        });
                    }
                    return [3 /*break*/, 5];
                case 4:
                    e_1 = _a.sent();
                    if (onError) {
                        event_1 = new MessageEventClass("FetchError", { data: e_1 });
                        onError(event_1);
                    }
                    if (e_1 instanceof Response400Error) {
                        throw e_1;
                    }
                    if (onStatusChange) {
                        onStatusChange("closed");
                    }
                    return [2 /*return*/, waitAndReconnect()];
                case 5: return [2 /*return*/, new Promise(function (resolve) {
                        var eventSource = new EventSourceClass(channelUrl);
                        var stopReconnecting = false;
                        var unsubscribe = function () {
                            if (eventSource.readyState !== 2) {
                                stopReconnecting = true;
                                eventSource.close();
                            }
                        };
                        eventSource.addEventListener("open", function () {
                            if (onStatusChange) {
                                onStatusChange("connected");
                            }
                            resolve(unsubscribe);
                        });
                        var statusCheck = setInterval(function () {
                            if (eventSource.readyState === 2) {
                                clearInterval(statusCheck);
                                if (onStatusChange) {
                                    onStatusChange("closed");
                                }
                                if (!stopReconnecting) {
                                    waitAndReconnect();
                                }
                            }
                        }, 300);
                        eventSource.addEventListener("update", function (event) {
                            var updateData = JSON.parse(event.data);
                            onUpdate(updateData);
                        });
                        eventSource.addEventListener("channelError", function (event) {
                            var errorData = JSON.parse(event.data);
                            if (errorData.fatal) {
                                stopReconnecting = true;
                            }
                            if (onChannelError) {
                                onChannelError(errorData);
                            }
                            eventSource.close();
                        });
                        eventSource.addEventListener("onerror", function (event) {
                            var messageEvent = event;
                            if (onError) {
                                onError(messageEvent);
                            }
                            eventSource.close();
                        });
                    })];
            }
        });
    });
}
exports.subscribeToQuery = subscribeToQuery;
//# sourceMappingURL=index.js.map